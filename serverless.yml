service: code-challenge-5

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  stage: dev
  environment:
    STAGE: ${self:custom.stage}
    SERVICE: ${self:custom.service}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  service: ${self:service}

  exclude:
    - package-lock.json
    - package.json

  export-env:
    overwrite: true

  exportOutputs:
    include:
      - AwsRegion
      - ApiUrl
      - CognitoUserPoolId
      - CognitoWebClientId
    output:
      file: ./.env-outputs

functions:
  add-todo:
    handler: functions/add-todo.handler
    environment:
      TODOS_TABLE_NAME: !Ref TodosTable
    events:
      - http:
          path: /todos
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
          request:
            schemas:
              application/json: ${file(schemas/add-todo.json)}
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt TodosTable.Arn

  get-todo:
    handler: functions/get-todo.handler
    environment:
      TODOS_TABLE_NAME: !Ref TodosTable
    events:
      - http:
          path: /todos/{id}
          method: get
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TodosTable.Arn

  delete-todo:
    handler: functions/delete-todo.handler
    environment:
      TODOS_TABLE_NAME: !Ref TodosTable
    events:
      - http:
          path: /todos/{id}
          method: delete
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: !GetAtt TodosTable.Arn

  update-todo:
    handler: functions/update-todo.handler
    environment:
      TODOS_TABLE_NAME: !Ref TodosTable
    events:
      - http:
          path: /todos/{id}
          method: put
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt TodosTable.Arn

  list-todos:
    handler: functions/list-todos.handler
    environment:
      TODOS_TABLE_NAME: !Ref TodosTable
    events:
      - http:
          path: /todos
          method: get
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
          request:
            parameters:
              querystrings:
                count: false
                nextToken: false
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: !GetAtt TodosTable.Arn

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED


  Outputs:
    AwsRegion:
      Value: ${aws:region}

    ApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${aws:region}.amazonaws.com/${sls:stage}

    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    CognitoWebClientId:
      Value: !Ref WebUserPoolClient


plugins:
  - serverless-iam-roles-per-function
  - serverless-export-env
  - serverless-export-outputs
